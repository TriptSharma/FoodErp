//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoodErp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FoodiesEntities : DbContext
    {
        public FoodiesEntities()
            : base("name=FoodiesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual int spAddLocation(string district, string city, string state, string country)
        {
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddLocation", districtParameter, cityParameter, stateParameter, countryParameter);
        }
    
        public virtual int spAddStore(string name, Nullable<int> locationId, Nullable<double> revenue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var revenueParameter = revenue.HasValue ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddStore", nameParameter, locationIdParameter, revenueParameter);
        }
    
        public virtual int spDeleteLocation(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteLocation", locationIdParameter);
        }
    
        public virtual int spDeleteStore(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteStore", storeIdParameter);
        }
    
        public virtual ObjectResult<spSelectLocations_Result> spSelectLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectLocations_Result>("spSelectLocations");
        }
    
        public virtual ObjectResult<spSelectStore_Result> spSelectStore(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectStore_Result>("spSelectStore", nameParameter);
        }
    
        public virtual ObjectResult<spSelectStores_Result> spSelectStores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectStores_Result>("spSelectStores");
        }
    
        public virtual ObjectResult<spSelectStoresAll_Result> spSelectStoresAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectStoresAll_Result>("spSelectStoresAll");
        }
    
        public virtual int spUpdateLocation(Nullable<int> locationId, string district, string city, string state, string country)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLocation", locationIdParameter, districtParameter, cityParameter, stateParameter, countryParameter);
        }
    
        public virtual int spUpdateStore(Nullable<int> storeId, string storeName, Nullable<int> locationId, Nullable<double> revenue)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var revenueParameter = revenue.HasValue ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStore", storeIdParameter, storeNameParameter, locationIdParameter, revenueParameter);
        }
    
        public virtual int spUpdateStoreName(string storeName, string newStoreName)
        {
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var newStoreNameParameter = newStoreName != null ?
                new ObjectParameter("NewStoreName", newStoreName) :
                new ObjectParameter("NewStoreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStoreName", storeNameParameter, newStoreNameParameter);
        }
    
        public virtual ObjectResult<spSelectCustomers_Result> spSelectCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectCustomers_Result>("spSelectCustomers");
        }
    }
}
